{"version":3,"sources":["cell.tsx","app.tsx","index.tsx"],"names":["CellShadow","angle","isSelected","shadowLength","shadowBlur","shadowSize","opacity","className","style","width","height","boxShadow","transform","Cell","rowIndex","value","columnIndex","selected","onClick","rowDistance","colDistance","absDistance","Math","max","abs","pow","handleClick","useCallback","background","initialGrid","initialPoint","App","useState","setSelected","grid","setGrid","updateGrid","target","map","row","_","rowDelta","columnDelta","absAngle","atan","PI","getShadowAngle","useEffect","gridComponent","key","handleKeyDown","e","length","tabIndex","onKeyDown","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e64d22f.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport './cell.css';\n\nconst SELECTED_COLOR = '#fff';\nconst BASE_COLOR = '#ffffff20';\nconst CELL_SIZE = '50px';\nconst CIRCLE_SIZE = '12px';\n\ninterface CellShadowProps {\n  angle: number;\n  isSelected: boolean;\n  shadowLength: number;\n  shadowBlur: number;\n  shadowSize: number;\n  opacity: number;\n}\n\nconst CellShadow = ({angle, isSelected, shadowLength, shadowBlur, shadowSize, opacity}: CellShadowProps) => {    \n  return (\n    <div\n      className=\"cell-shadow\"\n      style={{\n        width: CIRCLE_SIZE,\n        height: CIRCLE_SIZE,\n        boxShadow: isSelected \n          ? '0 0 100px 40px rgba(255,255,255,0.3)' \n          : `0 -${shadowLength}px ${shadowBlur}px ${shadowSize}px rgba(0,0,0,${opacity})`,\n        transform: `rotate(${angle}deg)`,\n      }}\n    />\n  );\n}\n\ninterface CellProps {\n  rowIndex: number;\n  value: number;\n  columnIndex: number; \n  selected: [number, number]; \n  onClick: (target: [number, number]) => void;\n}\n\nexport const Cell = ({rowIndex, value, columnIndex, selected, onClick}: CellProps) => {  \n  const rowDistance = rowIndex - selected[0];\n  const colDistance = columnIndex - selected[1];\n  const absDistance = Math.max(Math.abs(rowDistance), Math.abs(colDistance));\n  const shadowLength = 5 + 5 * absDistance;\n  const shadowBlur = 5 + Math.pow(absDistance, 2);\n  const shadowSize = 1 + absDistance;\n  const opacity = 1 / (1 + absDistance * 2);\n  const isSelected = selected[0] === rowIndex && selected[1] === columnIndex;\n\n  const handleClick = useCallback(() => {\n    onClick([rowIndex, columnIndex]);\n  }, [onClick, rowIndex, columnIndex]);\n\n  return (\n    <div \n      className=\"cell-container\"\n      onClick={handleClick}\n      style={{\n        width: CELL_SIZE,\n        height: CELL_SIZE,\n      }}\n    >\n      <div\n        className=\"cell\"\n        style={{\n          width: CIRCLE_SIZE,\n          height: CIRCLE_SIZE,\n          background: isSelected ? SELECTED_COLOR : BASE_COLOR,\n        }}\n      >\n        <CellShadow \n          isSelected={isSelected} \n          angle={value} \n          shadowBlur={shadowBlur}\n          shadowSize={shadowSize}\n          shadowLength={shadowLength} \n          opacity={opacity} \n        />\n      </div>\n    </div>\n  );\n}","import React, { useState, useEffect, useCallback } from 'react';\nimport { Cell } from './cell';\nimport './app.css';\n\ntype Point = [number, number];\n\nconst initialGrid = [\n  [0,0,0,0,0,0],\n  [0,0,0,0,0,0],\n  [0,0,0,0,0,0],\n  [0,0,0,0,0,0],\n  [0,0,0,0,0,0],\n  [0,0,0,0,0,0],\n  [0,0,0,0,0,0],\n  [0,0,0,0,0,0],\n  [0,0,0,0,0,0],\n];\nconst initialPoint: Point = [0,0];\n\nfunction getShadowAngle(rowDelta: number, columnDelta: number): number {\n  let absAngle = Math.atan(columnDelta/rowDelta) * 180 / Math.PI;\n  return rowDelta < 0 ? -absAngle : 180 - absAngle;\n}\n\nfunction App() {\n  const [selected, setSelected] = useState<Point>(initialPoint);\n  const [grid, setGrid] = useState(initialGrid);\n\n  const updateGrid = useCallback((target: Point) => {\n    setGrid(grid => grid.map(\n      (row, rowIndex) => row.map(\n        (_, columnIndex) => {\n          const isSelected = target[0] === rowIndex && target[1] === columnIndex;\n          const rowDistance = rowIndex - target[0];\n          const colDistance = columnIndex - target[1];\n          const angle = isSelected ? 0 : getShadowAngle(rowDistance, colDistance);\n          return angle < 0 ? 360 + angle : angle;\n        }\n      )\n    ));\n    setSelected(target);\n  }, []);\n\n  useEffect(() => {\n    updateGrid(initialPoint);\n  }, [updateGrid]);\n\n  const handleClick = (target: Point) => {\n    updateGrid(target);\n  }\n\n  const gridComponent = grid.map((_, rowIndex) => {\n    return (\n      <div key={rowIndex} className=\"grid-row\">\n        {grid[rowIndex].map((value, columnIndex) => {\n          return (\n            <Cell\n              key={columnIndex} \n              value={value}\n              rowIndex={rowIndex} \n              columnIndex={columnIndex} \n              selected={selected}\n              onClick={handleClick}\n            />\n          );\n        })}\n      </div>\n    );\n  });\n\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowUp': {\n        if (selected[0] === 0) return;\n        updateGrid([selected[0] - 1, selected[1]]);\n        break;\n      }\n      case 'ArrowDown': {\n        if (selected[0] === grid.length - 1) return;\n        updateGrid([selected[0] + 1, selected[1]])\n        break;\n      }\n      case 'ArrowLeft': {\n        if (selected[1] === 0) return;\n        updateGrid([selected[0], selected[1] - 1])\n        break;\n      }\n      case 'ArrowRight': {\n        if (selected[1] === grid[0].length - 1) return;\n        updateGrid([selected[0], selected[1] + 1])\n        break;\n      } \n    }\n  }, [updateGrid, selected, grid]);\n\n  return (\n    <div \n      className=\"grid-wrapper\" \n      tabIndex={0} \n      onKeyDown={handleKeyDown}\n    >\n      <div>\n        {gridComponent}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}